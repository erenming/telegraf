[agent]
    interval = "${INPUT_INTERVAL:30s}"
    round_interval = true
    debug = false
    flush_interval = "${FLUSH_INTERVAL:3s}"
    flush_jitter = "${FLUSH_JITTER:1s}"
    quiet = ${QUIET:true}
    #metric_batch_size = 1000
    #metric_buffer_limit = 10000

[[inputs.socket_listener]]
    service_address = "udp://:7082"
    data_format = "spot"
    read_buffer_size = "${SOCKET_BUFFER_SIZE:1024KB}" # 数据量过多或过大时, 数据会被丢弃
    total_rate_limit = "${TOTAL_RATE_LIMIT:30000/s, 50000, wait}" # 每秒最多30000条，容忍突发50000条，过快时阻塞等待，但后续的如果数据，超出read_buffer_size也会被系统丢弃
    [inputs.socket_listener.metrics_rate_limit] # 针对每种指标的限流
      application_db = "${APP_DB_RATE_LIMIT:10000/s, 12000, discard}" # 每秒最多100条，突发200条，数据过多时丢弃（默认也是丢弃）
      application_db_slow = "${APP_DB_SLOW_RATE_LIMIT:10000/s, 12000}"
      application_db_error = "${APP_DB_ERROR_RATE_LIMIT:10000/s, 12000}"
      application_cache = "${APP_CACHE_RATE_LIMIT:10000/s, 12000}"
      application_cache_error = "${APP_CACHE_RATE_LIMIT:5000/s, 10000}"
      error = "${ERROR_RATE_LIMIT:5000/s, 10000}"

[[inputs.selfstat]]
  port = 8091

# for api gateway
[[aggregators.basicstats]]
  period = "${BASICSTATS_PERIOD:30s}"
  drop_original = true
  stats = ["count","mean","min","max", "sum"]
  namepass = ["agg_*"]

# [[processors.rate_limiter]]
#     total_rate_limit = "${TOTAL_RATE_LIMIT:1200/s, 1500, wait}" # 每秒最多1200条，容忍突发1500条，过快时阻塞等待，但后续的如果数据，超出read_buffer_size也会被系统丢弃
#     [inputs.socket_listener.metrics_rate_limit] # 针对每种指标的限流
#       application_db = "${APP_DB_RATE_LIMIT:500/s, 1000, discard}" # 每秒最多100条，突发200条，数据过多时丢弃（默认也是丢弃）
#       application_db_slow = "${APP_DB_SLOW_RATE_LIMIT:500/s, 1000}"
#       application_db_error = "${APP_DB_ERROR_RATE_LIMIT:500/s, 1000}"
#       application_cache = "${APP_CACHE_RATE_LIMIT:500/s, 1000}"
#       application_cache_error = "${APP_CACHE_RATE_LIMIT:500/s, 1000}"
#       error = "${ERROR_RATE_LIMIT:500/s, 1000}"

[[processors.tag_override]]
    order = 99

[[processors.application_slow]]
    slow_http = ${SLOW_HTTP:300000000}
    slow_rpc = ${SLOW_RPC:300000000}
    slow_cache = ${SLOW_CACHE:50000000}
    slow_db = ${SLOW_DB:100000000}
    slow_default = ${SLOW_DEFAULT:300000000}
    namepass = ["application_*"]

[[processors.meta]]
    order = 100
    scope = "micro_service"
    scope_id_keys = ["terminus_key","source_terminus_key","target_terminus_key"]
    namepass = ["application_*","jvm_*","nodejs_*","service_node","target_addon_id","apm_*"]

[[aggregators.basicstats]]
    period = "${BASICSTATS_PERIOD:30s}"
    drop_original = true
    stats = ["count","mean","min","max","sum"]
    namepass = ["application_*"]

[[outputs.spot]]
    url = "$COLLECTOR_URL/api/v1/collect/metrics"
    method = "POST"
    data_format = "json"
    json_timestamp_units = "1ns"
    json_object_key = "metrics"
    timeout = "${METRIC_OUTPUT_TIMEOUT:10s}"
    namedrop = ["trace","span","error","metaserver_container","metaserver_all_containers","metaserver_host"]
    content_encoding="gzip"
    cluster_key="${DICE_CLUSTER_NAME:}"
    [outputs.spot.auth]
        type = "key" # support basic, key
        [outputs.spot.auth.property]
            telegraf_access_key = "${CLUSTER_ACCESS_KEY:}"
    [outputs.spot.headers]
        Content-Type = "application/json"

[[outputs.spot]]
    url = "$COLLECTOR_URL/api/v1/collect/trace"
    method = "POST"
    data_format = "json"
    json_timestamp_units = "1ns"
    json_object_key = "trace"
    timeout = "${TRACE_OUTPUT_TIMEOUT:10s}"
    namepass = ["trace","span"]
    content_encoding="gzip"
    cluster_key="${DICE_CLUSTER_NAME:}"
    [outputs.spot.auth]
        type = "key" # support basic, key
        [outputs.spot.auth.property]
            telegraf_access_key = "${CLUSTER_ACCESS_KEY:}"
    [outputs.spot.headers]
        Content-Type = "application/json"

[[outputs.spot]]
    url = "$COLLECTOR_URL/api/v1/collect/error"
    method = "POST"
    data_format = "json"
    json_timestamp_units = "1ns"
    json_object_key = "error"
    timeout = "${ERROR_OUTPUT_TIMEOUT:10s}"
    namepass = ["error"]
    content_encoding="gzip"
    cluster_key="${DICE_CLUSTER_NAME:}"
    [outputs.spot.auth]
        type = "key" # support basic, key
        [outputs.spot.auth.property]
            telegraf_access_key = "${CLUSTER_ACCESS_KEY:}"
    [outputs.spot.headers]
        Content-Type = "application/json"

[[inputs.node]] # 节点共有信息