[agent]
    interval = "${INPUT_INTERVAL:30s}"
    round_interval = true
    debug = false
    flush_interval = "${FLUSH_INTERVAL:3s}"
    flush_jitter = "${FLUSH_JITTER:1s}"
    quiet = ${QUIET:true}
    # metric_batch_size = 1000
    # metric_buffer_limit = 10000

[[inputs.node]] # 节点共有信息
[[inputs.global_docker]] # 共享 docker client, 不主动采集数据
    docker_endpoint = "unix:///rootfs/var/run/docker.sock"
    docker_timeout = "${DOCKER_TIMEOUT:10s}"

# 集群时钟一致性检测
[[inputs.cluster_clock]]

[[inputs.selfstat]]
  port = 8090

[[inputs.net]]
    ignore_interfaces = ["docker*", "lo*", "cali*", "veth*"]
[[inputs.net_packets]]
    enable = ${ENABLE_NET_PACKETS:false}
[[inputs.disk]]
    ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs", "rootfs", "*.glusterfs", "nfs4"]
    [inputs.disk.tagdrop]
        path = $STORAGE_MOUNT_PATH
[[inputs.diskio]]
    devices = ["*[0-9]"]
    name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]

[[inputs.host_summary]]
    gathers = ["cpu", "mem", "system", "node", "containers", "disk"]

[[inputs.docker_summary]]
    env_include = $INPUT_DOCKER_TAG_KEYS
    label_include = $INPUT_DOCKER_TAG_KEYS

[[inputs.addons]]
    gather_timeout = "1m"
    full_check_interval = "10m"
    input_key_name = "ADDON_NODE_ID"
    tag_env = ["ADDON_ID"]
    template_key_name = "ADDON_TYPE"
    namedrop = ['mysql_users']
    [inputs.addons.config_template.redis]
        config = """
            [redis]
                servers = ['tcp://:{{.REDIS_PASSWORD}}@{{.SELF_HOST}}:{{.SELF_PORT}}']
        """
        [inputs.addons.config_template.redis.env_match]
            SERVICE_TYPE="ADDONS"
            REDIS_PASSWORD="*"
            SELF_HOST="*"
            SELF_PORT="*"
    [inputs.addons.config_template.terminus-elasticsearch]
        config = """
        [elasticsearch]
            servers = ['http://{{.SELF_HOST}}:{{.SELF_PORT}}']
            http_timeout = '8s'
            local = true
            cluster_health = true
            cluster_health_level = 'cluster'
            cluster_stats = false
            node_stats = ['indices', 'transport', 'http', 'jvm']
            username = 'elastic'
            password = '{{.ES_PASSWORD}}'
        """
        [inputs.addons.config_template.terminus-elasticsearch.env_match]
            SERVICE_TYPE="ADDONS"
            SELF_HOST="*"
            SELF_PORT="*"
    [inputs.addons.config_template.mysql]
        config = """
        [mysql]
            servers = ['root:{{.MYSQL_ROOT_PASSWORD}}@tcp({{.SELF_HOST}}:{{.SELF_PORT}})/?tls=false']
            metric_version = 2
            perf_events_statements_digest_text_limit  = 120
            perf_events_statements_limit              = 250
            perf_events_statements_time_limit         = 86400
            table_schema_databases                    = []
            gather_table_schema                       = false
            gather_process_list                       = true
            gather_user_statistics                    = false
            gather_info_schema_auto_inc               = false
            gather_innodb_metrics                     = false
            gather_slave_status                       = true
            gather_binary_logs                        = true
            gather_table_io_waits                     = false
            gather_table_lock_waits                   = false
            gather_index_io_waits                     = false
            gather_event_waits                        = false
            gather_file_events_stats                  = false
            gather_perf_events_statements             = false
            gather_server_id                          = true
        [mysql_size_summary]
            servers = ['root:{{.MYSQL_ROOT_PASSWORD}}@tcp({{.SELF_HOST}}:{{.SELF_PORT}})/?tls=false']
            per_database  = false
        """
        [inputs.addons.config_template.mysql.env_match]
            SERVICE_TYPE="ADDONS"
            SELF_HOST="*"
            SELF_PORT="*"

[[processors.compatibility]]
[[processors.tag_override]]	
    order = 99

[[processors.meta]]
    order = 100
    scope = "org"
    scope_id_keys = ["org_name"]

[[aggregators.summary]]
    period = "60s"
    namepass = ["docker_container_cpu"]
    name = "summary_docker_container_cpu"
    type_tag_key = "instance_type"
    fields = ["allocation"]
    types = ["job", "addon", "component", "service"]
    distinct_tag = "container_id"

[[aggregators.summary]]
    period = "60s"
    namepass = ["docker_container_mem"]
    name = "summary_docker_container_mem"
    type_tag_key = "instance_type"
    fields = ["allocation"]
    types = ["job", "addon", "component", "service"]
    distinct_tag = "container_id"

[[outputs.spot]]
    url = "$COLLECTOR_URL/api/v1/collect/metrics"
    method = "POST"
    data_format = "json"
    json_timestamp_units = "1ns"
    json_object_key = "metrics"
    timeout = "${METRIC_OUTPUT_TIMEOUT:10s}"
    namedrop = ["trace","span","error","metaserver_container","metaserver_all_containers","metaserver_host", "cluster_clock"]
    content_encoding="gzip"
    cluster_key="${DICE_CLUSTER_NAME:}"
    [outputs.spot.auth]
        type = "key" # support basic, key
        [outputs.spot.auth.property]
            telegraf_access_key = "${CLUSTER_ACCESS_KEY:}"
    [outputs.spot.headers]
        Content-Type = "application/json"

[[outputs.spot]]
    url = "$COLLECTOR_URL/api/v1/collect/metaserver_container"
    method = "POST"
    data_format = "json"
    json_timestamp_units = "1ns"
    json_object_key = "metaserver_container"
    timeout = "5s"
    namepass = ["metaserver_container", "metaserver_all_containers"]
    content_encoding="gzip"
    cluster_key="${DICE_CLUSTER_NAME:}"
    [outputs.spot.auth]
        type = "key" # support basic, key
        [outputs.spot.auth.property]
            telegraf_access_key = "${CLUSTER_ACCESS_KEY:}"
    [outputs.spot.headers]
        Content-Type = "application/json"

[[outputs.spot]]
    url = "$COLLECTOR_URL/api/v1/collect/metaserver_host"
    method = "POST"
    data_format = "json"
    json_timestamp_units = "1ns"
    json_object_key = "metaserver_host"
    timeout = "5s"
    namepass = ["metaserver_host"]
    content_encoding="gzip"
    cluster_key="${DICE_CLUSTER_NAME:}"
    [outputs.spot.auth]
        type = "key" # support basic, key
        [outputs.spot.auth.property]
            telegraf_access_key = "${CLUSTER_ACCESS_KEY:}"
    [outputs.spot.headers]
        Content-Type = "application/json"

[[outputs.socket_writer]]
    address = "${TELEGRAF_PLATFORM_PORT_8094_UDP:}"
    namepass = ["cluster_clock"]
    data_format = "influx"
